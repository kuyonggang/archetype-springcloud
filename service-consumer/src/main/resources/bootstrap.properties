server.port=8885
server.context-path=/
spring.application.name=service-consumer1
spring.profiles.active=item1

##################注册中心配置##################
eureka.instance.instance-id=${spring.cloud.client.ipAddress}:${spring.application.name}:${server.port}:@project.version@
eureka.instance.hostname=localhost
eureka.instance.server.port=8761
eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:${eureka.instance.server.port}/eureka/
#在注册中心url中是否显示IP地址前缀（好像不起作用）
eureka.instance.prefer-ip-address=false

##################配置中心配置##################
## 配置客户端应用关联的应用
spring.cloud.config.name = consumer1
## 关联 profile
spring.cloud.config.profile = item1
## 关联 label（远程仓库分支）
spring.cloud.config.label = master
# 激活Config Server服务发现，这里默认是关闭的，如果不开启的话，无法从注册中心获取到相关配置信息
spring.cloud.config.discovery.enabled=true
# 配置中心服务器应用名称
spring.cloud.config.discovery.serviceId=config-server

##################feign请求配置##################
#开启请求压缩功能
feign.compression.request.enabled=true
#开启响应压缩功能
feign.compression.response.enabled=true
#指定压缩请求数据类型
feign.compression.request.mime-types=text/xml;application/xml;application/json
#如果传输超过该字节，就对其进行压缩
feign.compression.request.min-request-size=2048
# 打开feign对hustrix的支持
feign.hystrix.enabled=true

#控制台彩色输出
spring.output.ansi.enabled=ALWAYS

#日志配置,该接口的日志级别
logging.level.com.archetype.springcloud.service.HelloBackgroundService=DEBUG

################ Feign设置超时时间 ################
##########使用Feign调用接口分两层，ribbon的调用和hystrix的调用，所以ribbon的超时时间和Hystrix的超时时间的结合就是Feign的超时时间##########
#当OkToRetryOnAllOperations设置为false时，只会对get请求进行重试。如果设置为true，便会对所有的请求进行重试，如果是put或post等写操作，如果服务器接口没做幂等性，会产生不好的结果，所以OkToRetryOnAllOperations慎用。默认false
ribbon.OkToRetryOnAllOperations=false
# 请求处理超时时间，默认值5000
ribbon.ReadTimeout=2000
# 请求连接超时时间，默认值2000 ribbon的ConnectTimeout,配置的是请求服务的超时时间,除非服务找不到,或者网络原因,这个时间才会生效
ribbon.ConnectTimeout=2000
# ribbon还有MaxAutoRetries对当前实例的重试次数,MaxAutoRetriesNextServer对切换实例的重试次数, 如果ribbon的ReadTimeout超时,或者ConnectTimeout连接超时,会进行重试操作
# 如果在重试期间，时间超过了hystrix的超时时间，便会立即执行熔断
# 由于ribbon的重试机制,通常熔断的超时时间(hystrix超时时间)需要配置的比ReadTimeout（ribbon超时时间）长,ReadTimeout比ConnectTimeout长,否则还未重试,就熔断了
# 为了确保重试机制的正常运作,理论上（以实际情况为准）建议hystrix的超时时间为:>(MaxAutoRetries+MaxAutoRetriesNextServer+(MaxAutoRetries *MaxAutoRetriesNextServer)+1) * ReadTimeout
# 如果不配置ribbon的重试次数，默认会重试一次  默认情况下,GET方式请求无论是连接异常还是读取异常,都会进行重试；非GET方式请求,只有连接异常时,才会进行重试
ribbon.MaxAutoRetries=1
ribbon.MaxAutoRetriesNextServer=1
#根据上面的参数计算重试的次数：MaxAutoRetries+MaxAutoRetriesNextServer+(MaxAutoRetries *MaxAutoRetriesNextServer)+1
#如果想固定重新请求的次数，需要同时配置MaxAutoRetriesNextServer=0或者MaxAutoRetries=0

# default全局有效，service id指定应用有效
# 如果hystrix.command.default.execution.timeout.enabled为true,则会有两个执行方法超时的配置,一个就是ribbon的ReadTimeout,一个就是熔断器hystrix的timeoutInMilliseconds, 此时谁的值小谁生效
# 如果hystrix.command.default.execution.timeout.enabled为false,则熔断器不进行超时熔断,而是根据ribbon的ReadTimeout抛出的异常而熔断,也就是取决于ribbon
hystrix.command.default.execution.timeout.enabled=true
# 断路器超时时间，默认1000ms
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=3000
# Hystrix线程池大小默认为10
#hystrix.threadpool.default.coreSize=10

